/*
Idea for syntax maybeeee???
const add = fn (p: *Person) -> i32 {
    if p.born_in == Country.Canada {
        puts("Hello, eh\n");
    } else {
        puts("Hello\n");
    }
};

// void or nothing?
const main = fn () { }
const main = fn () -> void {

    // variables
    let list = List.new();
    defer list.drop();

    // lambdas (also shadowing)
    let list = list.iter().map(fn (x: i32) { x + 1 });
}

const Country = enum {
    Canada,
    Usa,
    Japan,
    Other(i32),
};

const Person = struct {
    name: String,
    born_in: Country,

    new: fn (name: String, born_in: Country) -> Self {
        Self { name, born_in }
    }

    rename: fn (self: mut Self, name: String) {
        self.name = name;
    }
};

// waaaay down the line: how to have a trait system
// (think of ways other than this rusty way)
const Display = trait {
    print: fn (Self) -> void,
};

impl Display for Person {
    print: fn (self: Self) -> void {
        std.io.print(self.name);
    }
}
*/

fn add(a: i32, b: i32) -> i32 {
    if 1 {
        return -1;
    } else if 1 {
        return 1;
    } else {
        return 2;
    }
}
